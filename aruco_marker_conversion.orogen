name "aruco_marker_conversion"

import_types_from "base"
import_types_from "base/Eigen.hpp"
import_types_from "aruco_marker_conversionTypes.hpp"


task_context "Task" do

  
  ###################
  # Properties
  ###################
  property( "marker_config", "aruco_marker_conversion/MarkerConfig").
  doc( "Configuration of the known marker-poses in the world-frame")
  
  property("position_variance_const", "double", 0.1).
  doc("A constant variance of the position-output")
  
  property("position_variance_range", "double", 0.05).
  doc("Position-varaince, which is linear to the distance")
  
  property("position_variance_angle", "double", 0.05).
  doc("Angular-error in the position-estimation")
  
  property("orientation_variance_const", "double", 0.01).
  doc("A constant variance of the position-output")
  
  property("best_orientation_only", "bool", true).
  doc("Only write out the best orientation-estimation").
  doc("If false, the average-orientation is written out")
  
  property("marker_orientation_threshold", "double", 3.14).
  doc(" Only use detected marker, with a relative view-angle below this threshold")
  
  property("minimum_orientation_markers", "int", 1).
  doc(" Only calculate the avg orientation, if we have at least X markers")

  property("use_body_orientation", "bool", false).
  doc("Use the body orientation in the world frame to compute the body pose")
  
  ##################
  # InputPorts
  ##################
  input_port( "marker_poses", "std/vector<base::samples::RigidBodyState>").
  doc( "Detected marker-poses in the camera-frame")
  
  input_port( "marker_pose", "base::samples::RigidBodyState").
  doc( "detected single marker-pose in the camera-frame")

  input_port( "body2world_orientaiton", "base::samples::RigidBodyState")
  
  ##################
  # OutputPorts
  ##################
  output_port( "pose_output", "base::samples::RigidBodyState").
  doc( "Vehicle-position in the world-frame, based on the detected markers")
  
  output_port( "orientation_output", "base::samples::RigidBodyState").
  doc( "Vehicle-orientation in the world-frame")
  
  output_port("aruco2body", "base::samples::RigidBodyState")
  output_port("body2world", "base::samples::RigidBodyState")

  output_port("orientation2world", "base::samples::RigidBodyState")
    
  port_driven 
  
end

